// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// table_1d_fast
IntegerVector table_1d_fast(IntegerVector input, int n);
RcppExport SEXP _SpaTopic_table_1d_fast(SEXP inputSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type input(inputSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(table_1d_fast(input, n));
    return rcpp_result_gen;
END_RCPP
}
// table_2d_fast
IntegerMatrix table_2d_fast(IntegerVector lhs, IntegerVector rhs, int n_lhs, int n_rhs);
RcppExport SEXP _SpaTopic_table_2d_fast(SEXP lhsSEXP, SEXP rhsSEXP, SEXP n_lhsSEXP, SEXP n_rhsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rhs(rhsSEXP);
    Rcpp::traits::input_parameter< int >::type n_lhs(n_lhsSEXP);
    Rcpp::traits::input_parameter< int >::type n_rhs(n_rhsSEXP);
    rcpp_result_gen = Rcpp::wrap(table_2d_fast(lhs, rhs, n_lhs, n_rhs));
    return rcpp_result_gen;
END_RCPP
}
// compute_loglike
double compute_loglike(arma::mat m_theta, arma::mat m_beta, IntegerMatrix docs, IntegerMatrix neighbors, NumericMatrix Kernel, size_t M, size_t n_words, size_t K, double beta, double alpha, double sigma);
RcppExport SEXP _SpaTopic_compute_loglike(SEXP m_thetaSEXP, SEXP m_betaSEXP, SEXP docsSEXP, SEXP neighborsSEXP, SEXP KernelSEXP, SEXP MSEXP, SEXP n_wordsSEXP, SEXP KSEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m_theta(m_thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type m_beta(m_betaSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type docs(docsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type neighbors(neighborsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Kernel(KernelSEXP);
    Rcpp::traits::input_parameter< size_t >::type M(MSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_words(n_wordsSEXP);
    Rcpp::traits::input_parameter< size_t >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_loglike(m_theta, m_beta, docs, neighbors, Kernel, M, n_words, K, beta, alpha, sigma));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_lda_c
List gibbs_lda_c(IntegerMatrix docs, IntegerMatrix Ndk, IntegerMatrix Nwk, IntegerVector Nk, IntegerVector Z, IntegerVector D, IntegerVector doc_list, IntegerVector word_list, size_t K, size_t niter, double beta, double alpha);
RcppExport SEXP _SpaTopic_gibbs_lda_c(SEXP docsSEXP, SEXP NdkSEXP, SEXP NwkSEXP, SEXP NkSEXP, SEXP ZSEXP, SEXP DSEXP, SEXP doc_listSEXP, SEXP word_listSEXP, SEXP KSEXP, SEXP niterSEXP, SEXP betaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type docs(docsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type Ndk(NdkSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type Nwk(NwkSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Nk(NkSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type D(DSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type doc_list(doc_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type word_list(word_listSEXP);
    Rcpp::traits::input_parameter< size_t >::type K(KSEXP);
    Rcpp::traits::input_parameter< size_t >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_lda_c(docs, Ndk, Nwk, Nk, Z, D, doc_list, word_list, K, niter, beta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_sampler_c
Rcpp::List gibbs_sampler_c(IntegerMatrix docs, IntegerMatrix Ndk, IntegerMatrix Nwk, IntegerVector Nk, IntegerVector Nd, IntegerVector Z, IntegerVector D, NumericMatrix dists, IntegerMatrix neighbors, IntegerVector doc_list, IntegerVector word_list, size_t K, double beta, double alpha, double sigma, size_t thin, size_t burnin, size_t niter, bool trace, bool display_progress);
RcppExport SEXP _SpaTopic_gibbs_sampler_c(SEXP docsSEXP, SEXP NdkSEXP, SEXP NwkSEXP, SEXP NkSEXP, SEXP NdSEXP, SEXP ZSEXP, SEXP DSEXP, SEXP distsSEXP, SEXP neighborsSEXP, SEXP doc_listSEXP, SEXP word_listSEXP, SEXP KSEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP sigmaSEXP, SEXP thinSEXP, SEXP burninSEXP, SEXP niterSEXP, SEXP traceSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type docs(docsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type Ndk(NdkSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type Nwk(NwkSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Nk(NkSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Nd(NdSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type D(DSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type neighbors(neighborsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type doc_list(doc_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type word_list(word_listSEXP);
    Rcpp::traits::input_parameter< size_t >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< size_t >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< size_t >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< size_t >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_sampler_c(docs, Ndk, Nwk, Nk, Nd, Z, D, dists, neighbors, doc_list, word_list, K, beta, alpha, sigma, thin, burnin, niter, trace, display_progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SpaTopic_table_1d_fast", (DL_FUNC) &_SpaTopic_table_1d_fast, 2},
    {"_SpaTopic_table_2d_fast", (DL_FUNC) &_SpaTopic_table_2d_fast, 4},
    {"_SpaTopic_compute_loglike", (DL_FUNC) &_SpaTopic_compute_loglike, 11},
    {"_SpaTopic_gibbs_lda_c", (DL_FUNC) &_SpaTopic_gibbs_lda_c, 12},
    {"_SpaTopic_gibbs_sampler_c", (DL_FUNC) &_SpaTopic_gibbs_sampler_c, 20},
    {NULL, NULL, 0}
};

RcppExport void R_init_SpaTopic(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
